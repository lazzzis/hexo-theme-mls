{"title":"Java Arrays.asList 转化 int 数组为 List","slug":"java-arrays-aslist-int-array","date":"2016-02-09T14:40:01.000Z","updated":"2016-11-08T11:23:05.000Z","comments":true,"path":"api/articles/java-arrays-aslist-int-array.json","excerpt":"<h1 id=\"问题的发现\">问题的发现</h1><p>用 Arrays.asList 方法转化一 int 型数组为 List 类型</p>\n<pre><code class=\"java\">import java.util.Arrays;\nimport java.util.List;\n\npublic class Test {\n    public static void main(String[] args) {\n        int arr[] = new int[]{1, 2, 3};\n        List list = Arrays.asList(arr);\n\n        System.out.println(&quot;int array&quot;);\n        System.out.println(list.size());\n        list.forEach(x -&gt; System.out.println(x));\n        /*  output:\n            int array\n            1\n            [I@16b98e56\n         */\n    }\n}\n</code></pre>\n<p>如果按照一般的思维，转化后的 list 应该含有三个元素{1, 2, 3}，所以 size 自然也应该是3。但从实践来看，并不是如此。</p>","content":"<h1 id=\"问题的发现\">问题的发现</h1><p>用 Arrays.asList 方法转化一 int 型数组为 List 类型</p>\n<pre><code class=\"java\">import java.util.Arrays;\nimport java.util.List;\n\npublic class Test {\n    public static void main(String[] args) {\n        int arr[] = new int[]{1, 2, 3};\n        List list = Arrays.asList(arr);\n\n        System.out.println(&quot;int array&quot;);\n        System.out.println(list.size());\n        list.forEach(x -&gt; System.out.println(x));\n        /*  output:\n            int array\n            1\n            [I@16b98e56\n         */\n    }\n}\n</code></pre>\n<p>如果按照一般的思维，转化后的 list 应该含有三个元素{1, 2, 3}，所以 size 自然也应该是3。但从实践来看，并不是如此。</p>\n<h1 id=\"原因解释\">原因解释</h1><p>首先查看 Arrays.asList 的源码</p>\n<pre><code class=\"java\">public static &lt;T&gt; List&lt;T&gt; asList(T... a) {\n    return new ArrayList&lt;&gt;(a);\n}\n</code></pre>\n<p>可以发现该方法传入的参数是一个可变长的参数。而问题的关键在于泛型。在 JAVA 中，基本数据类型是不能被泛型的。基本数据类型，即 primitive type，包含 8 种，具体可查看 <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\" target=\"_blank\" rel=\"external\">Link</a> 。</p>\n<p>支持泛型的只能是对象。int 是基本数据类型，不能被泛型。而 int[] 是数组，数组在 JAVA 中属于对象，因此能被泛型。所以在最开始的代码中，list 仅包含一个元素，而这个元素即为 包含了 {1, 2, 3} 的数组。</p>\n<h1 id=\"解决方法\">解决方法</h1><h2 id=\"声明-list-类型为-listltlt-int-gtgt\">声明 List 类型为 List&lt;&lt; int[] &gt;&gt;</h2><pre><code class=\"java\">import java.util.Arrays;\nimport java.util.List;\n\npublic class Test {\n    public static void main(String[] args) {\n        int arr[] = new int[]{1, 2, 3};\n        List&lt;int[]&gt; list1 = Arrays.asList(arr);\n        System.out.println(list1.get(0).length);\n        Arrays.stream(list1.get(0)).forEach(x -&gt; System.out.println(x));\n        /*  output:\n            3\n            1\n            2\n            3\n         */\n    }\n}\n</code></pre>\n<p>既然知道了list中仅有的元素是一个数组，那么只能将计就计，从列表取出是要多一个心眼，知道拿出的是数组。</p>\n<h2 id=\"将数组声明为-integer-对象数组\">将数组声明为 Integer 对象数组</h2><p>Integer 属于对象，因此能被泛型，可以达到预期的效果。</p>\n<pre><code class=\"java\">import java.util.Arrays;\nimport java.util.List;\n\npublic class Test {\n    public static void main(String[] args) {\n        Integer arrIN[] = new Integer[]{1, 2, 3};\n        list = Arrays.asList(arrIN);\n        System.out.println(&quot;Integer array&quot;);\n        System.out.println(list.size());\n        list.forEach(x -&gt; System.out.println(x));\n        /*  output:\n            3\n            1\n            2\n            3\n         */\n    }\n}\n</code></pre>\n<p>相对来讲这种方法跟满足预期要求。</p>\n<h1 id=\"参考\">参考</h1><ol>\n<li>Stack Overflow <a href=\"http://stackoverflow.com/questions/1467913/arrays-aslist-not-working-as-it-should\" target=\"_blank\" rel=\"external\">Arrays.asList() not working as it should?</a></li>\n<li><a href=\"http://www.cnblogs.com/chenssy/p/3890842.html\" target=\"_blank\" rel=\"external\">Java提高篇（三六）—–Java集合细节（二）：asList的缺陷</a></li>\n</ol>\n","categories":[],"tags":[{"name":"Java","slug":"Java","path":"api/tags/Java.json"}]}