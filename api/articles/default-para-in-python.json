{"title":"Python 对函数默认参数的处理","slug":"default-para-in-python","date":"2017-01-16T12:13:49.000Z","updated":"2017-01-16T12:18:40.000Z","comments":true,"path":"api/articles/default-para-in-python.json","excerpt":"<p>Python 对函数默认参数的处理</p>\n<p>一个以可变对象为默认参数的函数:</p>\n<pre><code class=\"Python\">class A:\n    def __init__(self):\n        self.x = 1\n        print(&#39;created&#39;)\n\ndef f(a = A()):\n    a.x += 1\n    print(a.x)\n# output: created\nf() # output: 2\nf() # output: 3\n</code></pre>\n<p>从结果可以看出，Python 在解析时便已经创建好了默认参数 a 的值。函数 f 在调用时采用了同一个对象，而不是每次调用时重新创建新的对象。这一点与 <code>C++</code> 的处理方式不同。</p>","content":"<p>Python 对函数默认参数的处理</p>\n<p>一个以可变对象为默认参数的函数:</p>\n<pre><code class=\"Python\">class A:\n    def __init__(self):\n        self.x = 1\n        print(&#39;created&#39;)\n\ndef f(a = A()):\n    a.x += 1\n    print(a.x)\n# output: created\nf() # output: 2\nf() # output: 3\n</code></pre>\n<p>从结果可以看出，Python 在解析时便已经创建好了默认参数 a 的值。函数 f 在调用时采用了同一个对象，而不是每次调用时重新创建新的对象。这一点与 <code>C++</code> 的处理方式不同。</p>\n<h1 id=\"f__defaults__\"><code>f.__defaults__</code></h1><p>在 Python 中，函数属于一等公民(first-class)。函数可当作一个对象，拥有自己的属性与方法。而默认参数则存在与函数的一个属性中。</p>\n<pre><code class=\"Python\">In [28]: def f(a, b=1):\n       2     pass\n\n\nIn [29]: f.__defaults__\nOut[29]: (1, [])\n</code></pre>\n<p>Python 在解析代码时，便会将默认参数存于 <code>f.__defaults__</code> 中。</p>\n<p>在 CPython 的 (funcobject.h)[<a href=\"https://github.com/python/cpython/blob/master/Include/funcobject.h\" target=\"_blank\" rel=\"external\">https://github.com/python/cpython/blob/master/Include/funcobject.h</a>] 中也可以看到，<code>PyFunctionObject</code> 的一个属性便是 <code>func_defaults</code>, 对应 Python 中每个函数中的 <code>__defaults__</code> 属性</p>\n<h1 id=\"默认参数-与-闭包\">默认参数 与 闭包</h1><p>以下是一个经常被提起的关于理解闭包的一段代码</p>\n<pre><code class=\"python\">def test():\n    lst = []\n    for i in range(5):\n        lst.append(lambda x: x * i)\n    return lst\n\n\nlst = test()\n[f(1) for f in lst]\n# Output: [4, 4, 4, 4, 4]\n</code></pre>\n<p>在这里中，匿名函数中的变量 <code>i</code> 并没有在声明时便被求值，而是在匿名函数被调用时才被求值。因为 <code>i</code> 来自于 <code>test</code> 函数，且在匿名函数被调用时，循环已经结束，所以 <code>i</code> 的值已经变成 4。</p>\n<p>但如果想让 <code>i</code> 在匿名函数声明时便被求值该如何做呢？<br>以下代码便借助默认参数解决问题:</p>\n<pre><code class=\"python\">def test():\n    lst = []\n    for i in range(5):\n        lst.append(lambda x, i=i: x * i)\n    return lst\n\nlst = test()\n\n[f(1) for f in lst]\n# Output: [0, 1, 2, 3, 4]\n</code></pre>\n<p>与第一段代码相比，第二段代码中的 <code>i</code> 在匿名函数声明时就被求值，而且因此，每个匿名函数拥有的默认参数 <code>i</code> 的值都不相同。这样解决了问题。</p>\n<h1 id=\"参考\">参考</h1><ol>\n<li><a href=\"https://github.com/python/cpython/blob/master/Include/funcobject.h\" target=\"_blank\" rel=\"external\">funcobject.h</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10120974/where-is-the-default-parameter-in-python-function\" target=\"_blank\" rel=\"external\">Where is the default parameter in Python function</a></li>\n<li><a href=\"http://effbot.org/zone/default-values.htm\" target=\"_blank\" rel=\"external\">Default Parameter Values in Python</a></li>\n</ol>\n","categories":[],"tags":[{"name":"Python","slug":"Python","path":"api/tags/Python.json"}]}